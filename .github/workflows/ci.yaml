name: Create namespace on new branch

on:
  create:
    branches:
      - 'feature-**'
  push:
    branches:
      - 'feature-**'


jobs:

  create:
  
    runs-on: ubuntu-latest
    steps:

      - name: Git checkout
        uses: actions/checkout@v1

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1

        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}

          # Authentication Token. Can use username and password instead.
          # Refer to Step 3.
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true

      # extract the current branch name and provide it as a var for easier integration into sed-commands
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.2

      - name: Log the branch name
        run: |
          echo ${{ steps.branch-name.outputs.current_branch }}

      - name: Create namespace
        if: ${{ github.event_name == 'create' }}
        run: |
          oc new-project ${{ steps.branch-name.outputs.current_branch }}
          oc adm policy add-role-to-group cluster-admin lodestar-developers -n ${{ steps.branch-name.outputs.current_branch }}

      - name: Rename target branch
        run: |
          # replace the default destination namespace(demo) with the branch namespace
          find . -type f -name "app.yaml" -exec sed -i'' -e 's/namespace: demo/namespace: ${{ steps.branch-name.outputs.current_branch }}/g' {} +
          # prefix the application name with the branch name to avoid collisions
          find . -type f -name "app.yaml" -exec sed -i'' -e 's/name: /name: ${{ steps.branch-name.outputs.current_branch }}-/g' {} +
          # set the target revision to the current branch
          find . -type f -name "app.yaml" -exec sed -i'' -e 's/targetRevision: main/targetRevision: ${{ steps.branch-name.outputs.current_branch }}/g' {} +

      - name: Deploy applications
        run: |
          # apply argo apps from the folder
          find . -name 'app.yaml' -exec oc apply -f {} \;
          # label them with their destination-namespace for better selection(f.e. on deletion)
          find . -name 'app.yaml' -exec oc label destination-namespace=${{ steps.branch-name.outputs.current_branch }} -f {} \;

      - name: Check if all apps are healthy
        run: |
          # bool to check if the apps are healthy
          healthy=0
          # counter to set a number of tries
          try=0
          tries=12
          # get the list of apps in the namespace
          apps=$(oc get applications.argoproj.io --no-headers -n labs-ci-cd -l destination-namespace=${{ steps.branch-name.outputs.current_branch }} | awk '{ print $3 }') 
          appslen=$(wc -w <<< $apps)
          # check if the condition is met
          while [ $healthy == 0 ] && [ $try -lt $tries ]
          do
            healthyapps=0
            for app in $apps
            do
              if [ $app != "Healthy" ]
              then
                echo "Trying again in 10 seconds"
                sleep 10
                try=$(( try + 1 ))
                break
              elif [ $app == "Healthy" ]
              then  
                healthyapps=$(( healthyapps + 1 ))
              fi
              if [ $healthyapps == $appslen ]
              then
                healthy=1
              fi
            done
          done

          if [ $try -eq $tries ]
          then
            echo "ERROR: Tried too many times"
            exit 1
          fi

      - name: Deploy the helm charts for the e2e
        run: |
          # go to selenium-grid directory
          cd tests/selenium-grid
          # install selenium-grid
          helm install --wait selenium . -n ${{ steps.branch-name.outputs.current_branch }}
          # go to the e2e-test directory
          cd ../e2e-test
          # replace the default destination namespace(demo) with the branch namespace in the Grafana URL
          sed -i 's/demo/${{ steps.branch-name.outputs.current_branch }}/' values.yaml 
          # install the helm chart
          helm install e2e . -n ${{ steps.branch-name.outputs.current_branch }}
          
      - name: Uninstall the e2e helm charts
        if: always()
        continue-on-error: true
        run: |
          # uninstall the e2e helm chart
          helm uninstall e2e -n ${{ steps.branch-name.outputs.current_branch }}
          # uninstall the selenium-grid helm chart
          helm uninstall selenium -n ${{ steps.branch-name.outputs.current_branch }}

