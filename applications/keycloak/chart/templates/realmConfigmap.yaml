apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "keycloak.name" . }}-realm
data:
  realm.json: |-
    {
      "id": "fiware-server",
      "realm": "fiware-server",
      "displayName": "Keycloak",
      "displayNameHtml": "<div class=\"kc-logo-text\"><span>Keycloak</span></div>",
      "roles": {
        "realm": [
          {
            "id": "80813112-333d-472e-8c3e-32554cdd5051",
            "name": "offline_access",
            "description": "${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "fiware-server",
            "attributes": {}
          },
          {
            "id": "de779ea4-2fc4-4b40-89f4-b64e2e8deba8",
            "name": "user",
            "description": "User privileges",
            "composite": false,
            "clientRole": false,
            "containerId": "fiware-server",
            "attributes": {}
          },
          {
            "id": "27e5d39c-7158-42ed-b172-7830a36538e4",
            "name": "people-manager",
            "description": "People manager privileges",
            "composite": false,
            "clientRole": false,
            "containerId": "fiware-server",
            "attributes": {}
          }
        ],
        "client": {
          "orion-pep": [
            {
              "id": "0490c508-c8e5-4fc6-a101-7eb6cbf6e30a",
              "name": "admin",
              "description": "Los admin pueden acceder a los path /version /admin y al resto de paths",
              "composite": false,
              "clientRole": true,
              "containerId": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
              "attributes": {}
            },
            {
              "id": "8521d7a2-7ca8-43b2-91dd-5f63c4311770",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
              "attributes": {}
            },
            {
              "id": "536220bf-42bd-4454-9d25-0d0cad43032a",
              "name": "producer",
              "composite": false,
              "clientRole": true,
              "containerId": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
              "attributes": {}
            },
            {
              "id": "1d67b3fd-7f6a-41a0-b9b6-781118facd57",
              "name": "subscriptor",
              "composite": false,
              "clientRole": true,
              "containerId": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
              "attributes": {}
            },
            {
              "id": "dfef2564-c70e-470b-ac88-b89a624c8678",
              "name": "consumer",
              "composite": false,
              "clientRole": true,
              "containerId": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
              "attributes": {}
            }
          ],
          "grafana": [
            {
              "id": "8a37307b-97ad-4600-98dd-022601438a1d",
              "name": "Admin",
              "composite": false,
              "clientRole": true,
              "containerId": "d74936be-9b6e-477d-8bb5-802ba95a5771",
              "attributes": {}
            },
            {
              "id": "336ae871-7ce7-48e2-83fe-d2333ce7653c",
              "name": "Viewer",
              "composite": false,
              "clientRole": true,
              "containerId": "d74936be-9b6e-477d-8bb5-802ba95a5771",
              "attributes": {}
            },
            {
              "id": "4da454be-e808-4583-9225-4e08d3b8fce3",
              "name": "Editor",
              "composite": false,
              "clientRole": true,
              "containerId": "d74936be-9b6e-477d-8bb5-802ba95a5771",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [
        {
          "id": "fc39b16f-907a-4be8-87ad-7a0c2fc77132",
          "name": "admin",
          "path": "/admin",
          "attributes": {},
          "realmRoles": [
            "user"
          ],
          "clientRoles": {
            "orion-pep": [
              "admin"
            ]
          },
          "subGroups": []
        },
        {
          "id": "73668860-5f42-4098-a93b-47c4a5755b13",
          "name": "hopu",
          "path": "/hopu",
          "attributes": {
            "fiware-service": [
              "hopa",
              "hopu"
            ],
            "fiware-servicepath": [
              "/hopa",
              "/hopu"
            ]
          },
          "realmRoles": [
            "uma_authorization"
          ],
          "clientRoles": {},
          "subGroups": []
        },
        {
          "id": "1670ff52-1f91-43ba-afd0-c1d110c60bb7",
          "name": "pilotohopu-consumer",
          "path": "/pilotohopu-consumer",
          "attributes": {
            "fiware-service": [
              "pilotohopu"
            ],
            "fiware-servicepath": [
              "/ambience"
            ]
          },
          "realmRoles": [
            "user"
          ],
          "clientRoles": {
            "orion-pep": [
              "consumer"
            ]
          },
          "subGroups": []
        },
        {
          "id": "ccb62f84-b64f-4d99-b170-6889496b6d6a",
          "name": "grafana-admin",
          "path": "/grafana-admin",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {
            "grafana": [
              "Admin"
            ]
          },
          "subGroups": []
        },
        {
          "id": "a0e63fee-f0bc-4878-a5c3-a8886f8fdc40",
          "name": "grafana-editor",
          "path": "/grafana-editor",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {
            "grafana": [
              "Editor"
            ]
          },
          "subGroups": []
        },
        {
          "id": "c8982627-c86f-4f9a-bd05-b86ac8c6548e",
          "name": "grafana-viewer",
          "path": "/grafana-viewer",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {
            "grafana": [
              "Viewer"
            ]
          },
          "subGroups": []
        }
      ],
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "users": [
        {
          "id": "bf58fdb0-9b7b-4a3f-a3e9-de4c151634bc",
          "createdTimestamp": 1576241386642,
          "username": "admin-user",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "email": "admin-user@hopu.eu",
          "credentials": [
            {
              "type": "password",
              "hashedSaltedValue": "6TwU59EkyFFHSFsK8KJPfv4ck+swws5hK/pZbU+9BBPlCBfDmrg8+tZV+mfuZzxmk69/wkgdHxBcARpJ4tz22Q==",
              "salt": "bCxgN/2dJGBDz5yxamernw==",
              "hashIterations": 27500,
              "counter": 0,
              "algorithm": "pbkdf2-sha256",
              "digits": 0,
              "period": 0,
              "createdDate": 1576241393285,
              "config": {}
            }
          ],
          "disableableCredentialTypes": [
            "password"
          ],
          "requiredActions": [],
          "clientRoles": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/admin",
            "/grafana-admin"
          ]
        },
        {
          "id": "6c5004a4-c019-4615-8861-ef2d30a42775",
          "createdTimestamp": 1615801558858,
          "username": "consumer-user",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "credentials": [
            {
              "type": "password",
              "hashedSaltedValue": "SvigG0xx6AYzaLV7nfcR8Ie17SrbPL89vJojtfoPecARocUj5InbLGlEQb4xCXl2YzQOM5LoUe6RovmYEuSZCg==",
              "salt": "p44ZILqaR64rSmJDUPnfIA==",
              "hashIterations": 27500,
              "counter": 0,
              "algorithm": "pbkdf2-sha256",
              "digits": 0,
              "period": 0,
              "createdDate": 1615801573342,
              "config": {}
            }
          ],
          "disableableCredentialTypes": [
            "password"
          ],
          "requiredActions": [],
          "clientRoles": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/test-test/test-test-consumer"
          ]
        },
        {
          "id": "3fdd8119-ca1a-48dc-a66d-aaadcb4b4d2a",
          "createdTimestamp": 1615801582098,
          "username": "producer-user",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "credentials": [
            {
              "type": "password",
              "hashedSaltedValue": "3Mrh7FndS04O0y5D3s6GUsGz8nT1IfI38PQzD6vaYiWDtFaKRUhOsRSBIXOeBxmXFirWZhlTPiF8FTgNZHSq3g==",
              "salt": "d6rYj0e7piR69SagYD9j4g==",
              "hashIterations": 27500,
              "counter": 0,
              "algorithm": "pbkdf2-sha256",
              "digits": 0,
              "period": 0,
              "createdDate": 1615801593279,
              "config": {}
            }
          ],
          "disableableCredentialTypes": [
            "password"
          ],
          "requiredActions": [],
          "clientRoles": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/test-test/test-test-producer"
          ]
        },
        {
          "id": "15de6bd4-e116-455a-8406-68606276dff6",
          "createdTimestamp": 1615801612460,
          "username": "subscriptor-user",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "credentials": [
            {
              "type": "password",
              "hashedSaltedValue": "EQRtKfbtcOUJdhZ+AnRAkDEvg2VqsB7lJvxaBs7wlGFRctdMPuPrTzmGRIo/3Di5v42hUOwAMIDSr2whh6KTJw==",
              "salt": "6iQXjpEt0uRg4JIAEEEgCw==",
              "hashIterations": 27500,
              "counter": 0,
              "algorithm": "pbkdf2-sha256",
              "digits": 0,
              "period": 0,
              "createdDate": 1615801635905,
              "config": {}
            }
          ],
          "disableableCredentialTypes": [
            "password"
          ],
          "requiredActions": [],
          "clientRoles": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "notBefore": 0,
          "groups": [
            "/test-test/test-test-subscriptor"
          ]
        }
      ],
      "clients": [
        {
          "id": "ca3d2942-8c67-4bea-9427-1089642c3a3c",
          "clientId": "fiware-login",
          "surrogateAuthRequired": false,
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "da756bc9-b059-4e0e-be39-93f49e4df999",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "fiware-scope",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "d74936be-9b6e-477d-8bb5-802ba95a5771",
          "clientId": "grafana",
          "rootUrl": "{{ .Values.realm.grafana.rootUrl }}",
          "adminUrl": "{{ .Values.realm.grafana.adminUrl }}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "secret",
          "redirectUris": {{ .Values.realm.grafana.redirectUris | toPrettyJson | indent 12 }},
          "webOrigins": {{ .Values.realm.grafana.webOrigins | toPrettyJson | indent 12 }},
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.multivalued.roles": "false",
            "saml.force.post.binding": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "0fddfe5c-e4df-4cc2-9106-97c99fcc59f9",
          "clientId": "orion-pep",
          "adminUrl": "{{ .Values.realm.orionPep.adminUrl }}",
          "baseUrl": "{{ .Values.realm.orionPep.baseUrl }}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "978ad148-d99b-406d-83fc-578597290a79",
          "redirectUris": {{ .Values.realm.orionPep.redirectUris | toPrettyJson | indent 12 }},
          "webOrigins": {{ .Values.realm.orionPep.webOrigins | toPrettyJson | indent 12}},
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "1c768825-3797-4236-9dff-3380da8e5f27",
              "name": "Client ID",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientId",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientId",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f19985fb-b9ac-4255-993a-0d9a43b31fd2",
              "name": "Client Host",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientHost",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientHost",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3a8f3d2a-8088-47fc-a38b-3d27b3ea303b",
              "name": "Client IP Address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientAddress",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientAddress",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "role_list",
            "profile",
            "roles",
            "fiware-scope",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "authorizationSettings": {
            "allowRemoteResourceManagement": true,
            "policyEnforcementMode": "ENFORCING",
            "resources": [
              {
                "name": "v1",
                "type": "orion:context-management",
                "ownerManagedAccess": false,
                "displayName": "Context management v1 API",
                "attributes": {},
                "_id": "40127a74-4f7c-4d57-aa4f-2ac38f3b2f39",
                "uris": [
                  "/v1/*"
                ]
              },
              {
                "name": "v2",
                "type": "orion:context-management",
                "ownerManagedAccess": false,
                "displayName": "Context management v2 API",
                "attributes": {},
                "_id": "12490976-8125-4c04-beee-bf97a5624854",
                "uris": [
                  "/v2/*"
                ]
              },
              {
                "name": "version",
                "type": "orion:admin",
                "ownerManagedAccess": false,
                "displayName": "List version",
                "attributes": {},
                "_id": "29f2f2ab-3f33-480a-a2dc-a233db516dce",
                "uris": [
                  "/version"
                ]
              },
              {
                "name": "admin",
                "type": "orion:admin",
                "ownerManagedAccess": false,
                "displayName": "Admin API",
                "attributes": {},
                "_id": "d7c2960f-d119-43cb-998c-08c217b0370f",
                "uris": [
                  "/admin/*"
                ]
              },
              {
                "name": "subscriptions",
                "type": "orion:subscriptions",
                "ownerManagedAccess": false,
                "attributes": {},
                "_id": "72cfd191-4d8d-43fa-9e51-683d965bdec3",
                "uris": [
                  "/v2/subscriptions",
                  "/v2/subscriptions/*"
                ]
              }
            ],
            "policies": [
              {
                "id": "706a4589-1800-4ca8-964f-27fb67ba54f9",
                "name": "fiware-headers context management v3",
                "description": "",
                "type": "js",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "code": "var context = $evaluation.getContext();\nvar attributes = context.getAttributes();\nvar identity = context.getIdentity();\n \nif (attributes.exists('http.fiware-service') && \n    attributes.exists('http.fiware-servicepath') && \n    attributes.exists('http.method') && \n    identity.getAttributes().exists('fiware-scope-object')) {\n\n    var request_service = attributes.getValue('http.fiware-service').asString(0);\n    var request_servicepath = attributes.getValue('http.fiware-servicepath').asString(0);\n    var request_method = attributes.getValue('http.method').asString(0);\n    \n    var fiware_scopes = identity.getAttributes().getValue('fiware-scope-object');\n    var fiware_scope;\n\n    var index;\n    for (index = 0; index < fiware_scopes.size(); index++) {\n        fiware_scope = JSON.parse(fiware_scopes.asString(index));\n\n        if (fiware_scope.hasOwnProperty(\"fiware-service\") &&\n            fiware_scope[\"fiware-service\"] === request_service && \n            fiware_scope.hasOwnProperty(\"fiware-servicepath\") &&\n            fiware_scope[\"fiware-servicepath\"].equals(request_servicepath) && \n            fiware_scope.hasOwnProperty(\"orion-roles\") &&\n            ((fiware_scope[\"orion-roles\"].equals('consumer') && request_method === 'GET') ||\n             (fiware_scope[\"orion-roles\"].equals('producer') && ['POST', 'PUT', 'PATCH', 'DELETE'].indexOf(request_method) != -1))\n            ) {\n                $evaluation.grant();\n        }            \n    }\n}"
                }
              },
              {
                "id": "9094834e-5d57-4188-b1b8-d96b4fb868bc",
                "name": "consumer method",
                "description": "Comprueba que el método de la petición es el permitido para un consumer (GET)",
                "type": "js",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "code": "var context = $evaluation.getContext();\nvar attributes = context.getAttributes();\nvar identity = context.getIdentity();\n \nvar method = attributes.getValue('http.method').asString(0);\n\nif (method === 'GET') {\n    $evaluation.grant();\n}\n"
                }
              },
              {
                "id": "09a0ce41-8220-4767-ab31-b4be3d169426",
                "name": "consumer policy v3",
                "type": "aggregate",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "applyPolicies": "[\"fiware-headers context management v3\",\"consumer method\",\"consumer user\"]"
                }
              },
              {
                "id": "a7a7fc09-996a-412a-af2d-977f2013d926",
                "name": "consumer user",
                "description": "Comprueba que el usuario tiene rol consumer",
                "type": "role",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "roles": "[{\"id\":\"orion-pep/consumer\",\"required\":true}]"
                }
              },
              {
                "id": "295d47d2-f3b0-4b9c-98ae-cbffdee9efe2",
                "name": "producer user",
                "description": "Comprueba que el usuario tiene rol producer",
                "type": "role",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "roles": "[{\"id\":\"orion-pep/producer\",\"required\":true}]"
                }
              },
              {
                "id": "d3460cdb-452d-46ed-8dae-07f7c4ca21dd",
                "name": "producer method",
                "description": "Comprueba que el método de la petición es el permitido para un producer (POST, PUT, PATCH o DELETE)",
                "type": "js",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "code": "var context = $evaluation.getContext();\nvar attributes = context.getAttributes();\nvar identity = context.getIdentity();\n \nvar method = attributes.getValue('http.method').asString(0);\n\nif (method === 'POST' || method === 'PUT' || method === 'PATCH' || method === 'DELETE') {\n    $evaluation.grant();\n}\n"
                }
              },
              {
                "id": "cc7814a3-d7ec-4e59-b144-185f5562b79e",
                "name": "admin user",
                "description": "Comprueba que el usuario tiene rol admin",
                "type": "role",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "roles": "[{\"id\":\"orion-pep/admin\",\"required\":true}]"
                }
              },
              {
                "id": "bce0e81b-13e2-4b48-8b73-9c9125e5b2ea",
                "name": "subscriptor user",
                "description": "Comprueba que el usuario tiene el rol subscriptor",
                "type": "role",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "roles": "[{\"id\":\"orion-pep/subscriptor\",\"required\":true}]"
                }
              },
              {
                "id": "357b2cfd-578c-4efd-8e9d-81204ecd3ebd",
                "name": "producer policy v3",
                "type": "aggregate",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "applyPolicies": "[\"producer user\",\"fiware-headers context management v3\",\"producer method\"]"
                }
              },
              {
                "id": "f431cdb2-3d58-4fb0-b9ea-512b9bf0be39",
                "name": "fiware-headers subscriptions v3",
                "type": "js",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "code": "var context = $evaluation.getContext();\nvar attributes = context.getAttributes();\nvar identity = context.getIdentity();\n \nif (attributes.exists('http.fiware-service') && \n    attributes.exists('http.fiware-servicepath') && \n    attributes.exists('http.method') && \n    identity.getAttributes().exists('fiware-scope-object')) {\n\n    var request_service = attributes.getValue('http.fiware-service').asString(0);\n    var request_servicepath = attributes.getValue('http.fiware-servicepath').asString(0);\n    var request_method = attributes.getValue('http.method').asString(0);\n    \n    var fiware_scopes = identity.getAttributes().getValue('fiware-scope-object');\n    var fiware_scope;\n\n    var index;\n    for (index = 0; index < fiware_scopes.size(); index++) {\n        fiware_scope = JSON.parse(fiware_scopes.asString(index));\n\n        if (fiware_scope.hasOwnProperty(\"fiware-service\") &&\n            fiware_scope[\"fiware-service\"] === request_service && \n            fiware_scope.hasOwnProperty(\"fiware-servicepath\") &&\n            fiware_scope[\"fiware-servicepath\"].contains(request_servicepath) && \n            fiware_scope.hasOwnProperty(\"orion-roles\") &&\n            (fiware_scope[\"orion-roles\"].contains('subscriptor') && ['GET','POST', 'PUT', 'PATCH', 'DELETE'].indexOf(request_method) != -1)) {\n            $evaluation.grant();\n        }            \n    }\n}"
                }
              },
              {
                "id": "bbb2bf8c-4e03-475a-9f9c-bb2a5727407e",
                "name": "subscriptor policy v3",
                "type": "aggregate",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "applyPolicies": "[\"fiware-headers subscriptions v3\",\"subscriptor user\"]"
                }
              },
              {
                "id": "29ce03a5-bbba-4d5e-b69a-21230fba63c1",
                "name": "context management resources",
                "description": "Para acceder a la api de context management (/v1 o /v2) el usuario debe ser admin o consumer o producer",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "AFFIRMATIVE",
                "config": {
                  "defaultResourceType": "orion:context-management",
                  "applyPolicies": "[\"producer policy v3\",\"consumer policy v3\",\"admin user\"]"
                }
              },
              {
                "id": "ea8f39d7-32a2-44fa-bd62-55c001b0c389",
                "name": "admin resources",
                "description": "Sólo los usuarios admin pueden acceder a los recursos orion:admin (/version y /admin)",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "defaultResourceType": "orion:admin",
                  "applyPolicies": "[\"admin user\"]"
                }
              },
              {
                "id": "9f612449-4016-420e-a441-93c120d71e7c",
                "name": "subscriptions",
                "description": "Para acceder a la api de subscription el usuario debe ser subscriptor",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "AFFIRMATIVE",
                "config": {
                  "resources": "[\"subscriptions\"]",
                  "applyPolicies": "[\"subscriptor policy v3\",\"admin user\"]"
                }
              }
            ],
            "scopes": []
          }
        }
      ],
      "clientScopes": [
        {
          "id": "782879f3-8eb9-49fd-9d78-404c105f219f",
          "name": "fiware-scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "c494ec61-2743-4e1c-9370-45ef64ab941b",
              "name": "fiware-service",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "aggregate.attrs": "true",
                "userinfo.token.claim": "true",
                "multivalued": "true",
                "user.attribute": "fiware-service",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "fiware-service",
                "jsonType.label": "String"
              }
            },
            {
              "id": "947ba0f0-a6d9-4d18-9ec5-963d5e040d32",
              "name": "fiware-servicepath mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "aggregate.attrs": "true",
                "userinfo.token.claim": "true",
                "multivalued": "true",
                "user.attribute": "fiware-servicepath",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "fiware-servicepath",
                "jsonType.label": "String"
              }
            },
            {
              "id": "49a3939b-5eb0-4a87-843b-d17b9aed0480",
              "name": "fiware-scope-object",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-script-based-protocol-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "multivalued": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "fiware-scope-object",
                "script": "/**\n * Available variables: \n * user - the current user\n * realm - the current realm\n * token - the current token\n * userSession - the current userSession\n * keycloakSession - the current userSession\n */\n\nvar ArrayList = Java.type(\"java.util.ArrayList\");\nvar fiware_scope = new ArrayList();\n\nvar forEach = Array.prototype.forEach;\n\nvar fiware_service;\nvar fiware_servicepath;\nvar fiware_entry;\nvar roles = '';\n\nvar orion_client = realm.getClientByClientId('orion-pep');\nvar iotagent_pep = realm.getClientByClientId('iotagent-pep');\nvar quantumleap_client = realm.getClientByClientId('quantumleap-pep');\n\nfiware_service = user.getFirstAttribute('fiware-service');\nfiware_servicepath = user.getFirstAttribute('fiware-servicepath');\nif (fiware_service !== null && fiware_servicepath !== null) {\n\n    fiware_entry = {\n        \"fiware-service\": fiware_service,\n        \"fiware-servicepath\": fiware_servicepath\n    };\n\n    var roleModels = user.getClientRoleMappings(orion_client);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(orion_client).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"orion-roles\"] = roles;\n        roles = '';\n    }\n    roleModels = user.getClientRoleMappings(iotagent_pep);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(iotagent_pep).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"iota-roles\"] = roles;\n        roles = '';\n    }\n    roleModels = user.getClientRoleMappings(quantumleap_client);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(quantumleap_client).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"ql-roles\"] = roles;\n        roles = '';\n    }\n\n    fiware_scope.add(JSON.stringify(fiware_entry));\n    fiware_entry = {};\n}\n\nforEach.call(\n    user.getGroups().toArray(),\n    function (group) {\n\n        fiware_service = group.getFirstAttribute('fiware-service');\n        fiware_servicepath = group.getFirstAttribute('fiware-servicepath');\n        if (fiware_service !== null && fiware_servicepath !== null) {\n            fiware_entry = {\n                \"fiware-service\": fiware_service,\n                \"fiware-servicepath\": fiware_servicepath\n            };\n\n            var roleModels = group.getClientRoleMappings(orion_client);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(orion_client).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"orion-roles\"] = roles;\n                roles = '';\n            }\n            roleModels = group.getClientRoleMappings(iotagent_pep);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(iotagent_pep).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"iota-roles\"] = roles;\n                roles = '';\n            }\n            roleModels = group.getClientRoleMappings(quantumleap_client);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(quantumleap_client).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"ql-roles\"] = roles;\n                roles = '';\n            }\n\n            fiware_scope.add(JSON.stringify(fiware_entry));\n            fiware_entry = {};\n        } else if (group.getParentId() !== null) {\n            fiware_service = group.getParent().getFirstAttribute('fiware-service');\n            fiware_servicepath = group.getParent().getFirstAttribute('fiware-servicepath');\n\n            if (fiware_service !== null && fiware_servicepath !== null) {\n                fiware_entry = {\n                    \"fiware-service\": fiware_service,\n                    \"fiware-servicepath\": fiware_servicepath\n                };\n                var subroleModels = group.getClientRoleMappings(orion_client);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(orion_client).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"orion-roles\"] = roles;\n                    roles = '';\n                }\n                subroleModels = group.getClientRoleMappings(iotagent_pep);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(iotagent_pep).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"iota-roles\"] = roles;\n                    roles = '';\n                }\n                subroleModels = group.getClientRoleMappings(quantumleap_client);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(quantumleap_client).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"ql-roles\"] = roles;\n                    roles = '';\n                }\n\n                fiware_scope.add(JSON.stringify(fiware_entry));\n                fiware_entry = '';\n            }\n        }\n    }\n);\n\nexports = fiware_scope;"
              }
            },
            {
              "id": "d0f7f729-b29c-4de7-b4cd-654013cb5214",
              "name": "fiware-scope",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-script-based-protocol-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "multivalued": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "fiware-scope",
                "script": "/**\n * Available variables: \n * user - the current user\n * realm - the current realm\n * token - the current token\n * userSession - the current userSession\n * keycloakSession - the current userSession\n */\n\n\n//insert your code here...\nvar ArrayList = Java.type(\"java.util.ArrayList\");\nvar fiware_scope = new ArrayList();\n\nvar forEach = Array.prototype.forEach;\n\nvar fiware_service;\nvar fiware_servicepath;\nvar fiware_entry;\nvar roles = '';\n\nvar orion_client = realm.getClientByClientId('orion-pep');\nvar iotagent_pep = realm.getClientByClientId('iotagent-pep');\nvar quantumleap_client = realm.getClientByClientId('quantumleap-pep');\n\nfiware_service = user.getFirstAttribute('fiware-service');\nfiware_servicepath = user.getFirstAttribute('fiware-servicepath');\nif (fiware_service !== null && fiware_servicepath !== null) {\n\n    fiware_entry = {\n        \"fiware-service\": fiware_service,\n        \"fiware-servicepath\": fiware_servicepath\n    };\n\n    var roleModels = user.getClientRoleMappings(orion_client);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(orion_client).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"orion-roles\"] = roles;\n        roles = '';\n    }\n    roleModels = user.getClientRoleMappings(iotagent_pep);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(iotagent_pep).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"iota-roles\"] = roles;\n        roles = '';\n    }\n    roleModels = user.getClientRoleMappings(quantumleap_client);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(quantumleap_client).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"ql-roles\"] = roles;\n        roles = '';\n    }\n\n    fiware_scope.add(JSON.stringify(fiware_entry));\n    fiware_entry = {};\n}\n\nforEach.call(\n    user.getGroups().toArray(),\n    function (group) {\n\n        fiware_service = group.getFirstAttribute('fiware-service');\n        fiware_servicepath = group.getFirstAttribute('fiware-servicepath');\n        if (fiware_service !== null && fiware_servicepath !== null) {\n            fiware_entry = {\n                \"fiware-service\": fiware_service,\n                \"fiware-servicepath\": fiware_servicepath\n            };\n\n            var roleModels = group.getClientRoleMappings(orion_client);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(orion_client).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"orion-roles\"] = roles;\n                roles = '';\n            }\n            roleModels = group.getClientRoleMappings(iotagent_pep);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(iotagent_pep).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"iota-roles\"] = roles;\n                roles = '';\n            }\n            roleModels = group.getClientRoleMappings(quantumleap_client);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(quantumleap_client).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"ql-roles\"] = roles;\n                roles = '';\n            }\n\n            fiware_scope.add(JSON.stringify(fiware_entry));\n            fiware_entry = {};\n        } else if (group.getParentId() !== null) {\n            fiware_service = group.getParent().getFirstAttribute('fiware-service');\n            fiware_servicepath = group.getParent().getFirstAttribute('fiware-servicepath');\n\n            if (fiware_service !== null && fiware_servicepath !== null) {\n                fiware_entry = fiware_service + \";\" + fiware_servicepath;\n\n                var subroleModels = group.getClientRoleMappings(orion_client);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(orion_client).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"orion-roles\"] = roles;\n                    roles = '';\n                }\n                subroleModels = group.getClientRoleMappings(iotagent_pep);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(iotagent_pep).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"iota-roles\"] = roles;\n                    roles = '';\n                }\n                subroleModels = group.getClientRoleMappings(quantumleap_client);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(quantumleap_client).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"ql-roles\"] = roles;\n                    roles = '';\n                }\n\n                fiware_scope.add(fiware_entry);\n                fiware_entry = '';\n            }\n        }\n    }\n);\n\nexports = fiware_scope;"
              }
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "role_list",
        "profile",
        "email",
        "roles",
        "web-origins"
      ],
        "defaultOptionalClientScopes": [
          "offline_access",
          "address",
          "phone",
          "microprofile-jwt"
        ]
    }
    